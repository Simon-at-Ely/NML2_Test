'''
Neuron simulator export for:

Components:
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    iMC1_cell_1_origin (Type: cell)
    net1 (Type: networkWithTemperature:  temperature=305.15 (SI temperature))
    null (Type: notes)
    BK_IAMC_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    CaV_R_iAMC_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Gran_CaPool_98 (Type: decayingPoolConcentrationModel:  restingConc=7.55E-5 (SI concentration) decayConstant=0.01 (SI time) shellThickness=8.4E-8 (SI length) Faraday=96485.3 (SI charge_per_mole) AREA_SCALE=1.0 (SI area) LENGTH_SCALE=1.0 (SI length))
    null (Type: notes)
    KA_iAMC_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    Kdr_iAMC_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    LeakConductance (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    NaP_iAMC_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    NaxSH0_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    NaxSH10_ChannelML (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: include)
    network (Type: networkWithTemperature:  temperature=308.15 (SI temperature))
    Vm_iMC1_cell_1_origin (Type: Simulation:  length=1.0 (SI time) step=5.0E-5 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.0
         org.neuroml.model   v1.5.0
         jLEMS               v0.9.8.7

'''

import neuron

import time
h = neuron.h
h.load_file("nrngui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt):

        print("\n    Starting simulation in NEURON generated from NeuroML2 model...\n")

        # Adding simulation Component(id=Vm_iMC1_cell_1_origin type=Simulation) of network/component: network (Type: networkWithTemperature:  temperature=308.15 (SI temperature))

        # Temperature used for network: 308.15 K
        h.celsius = 308.15 - 273.15

        print("Population single_cell contains 1 instance(s) of component: iMC1_cell_1_origin of type: cell")

        print("Setting the default initial concentrations for ca (used in iMC1_cell_1_origin) to 7.55E-5 mM (internal), 2.4 mM (external)")
        h("cai0_ca_ion = 7.55E-5")
        h("cao0_ca_ion = 2.4")

        print("Setting the default initial concentrations for ca (used in iMC1_cell_1_origin) to 7.55E-5 mM (internal), 2.4 mM (external)")
        h("cai0_ca_ion = 7.55E-5")
        h("cao0_ca_ion = 2.4")

        h.load_file("iMC1_cell_1_origin.hoc")
        a_single_cell = []
        h("{ n_single_cell = 1 }")
        h("objectvar a_single_cell[n_single_cell]")
        for i in range(int(h.n_single_cell)):
            h("a_single_cell[%i] = new iMC1_cell_1_origin()"%i)
            h("access a_single_cell[%i].filament_100000001_0"%i)

        h("{ a_single_cell[0].position(0., 0., 0.) }")

        h("proc initialiseV_single_cell() { for i = 0, n_single_cell-1 { a_single_cell[i].set_initial_v() } }")
        h("objref fih_single_cell")
        h('{fih_single_cell = new FInitializeHandler(0, "initialiseV_single_cell()")}')

        h("proc initialiseIons_single_cell() { for i = 0, n_single_cell-1 { a_single_cell[i].set_initial_ion_properties() } }")
        h("objref fih_ion_single_cell")
        h('{fih_ion_single_cell = new FInitializeHandler(1, "initialiseIons_single_cell()")}')

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt

        # Display: self.display_Voltage_display
        self.display_Voltage_display = h.Graph(0)
        self.display_Voltage_display.size(0,h.tstop,-80.0,50.0)
        self.display_Voltage_display.view(0, -80.0, h.tstop, 130.0, 80, 330, 330, 250)
        h.graphList[0].append(self.display_Voltage_display)
        # Line, plotting: single_cell/0/iMC1_cell_1_origin/v
        self.display_Voltage_display.addexpr("a_single_cell[0].filament_100000001_0.v(0.040173028)", "a_single_cell[0].filament_100000001_0.v(0.040173028)", 1, 1, 0.8, 0.9, 2)



        # File to save: Volts_file
        # Column: single_cell/0/iMC1_cell_1_origin/v
        h(' objectvar v_V_Volts_file ')
        h(' { v_V_Volts_file = new Vector() } ')
        h(' { v_V_Volts_file.record(&a_single_cell[0].filament_100000001_0.v(0.040173028)) } ')
        h.v_V_Volts_file.resize((h.tstop * h.steps_per_ms) + 1)

        # File to save: time
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' { v_time.record(&t) } ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        self.initialized = False

        self.sim_end = -1 # will be overwritten

        h.nrncontrolmenu()


    def run(self):

        self.initialized = True
        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

        h.run()

        self.sim_end = time.time()
        sim_time = self.sim_end - sim_start
        print("Finished NEURON simulation in %f seconds (%f mins)..."%(sim_time, sim_time/60.0))

        self.save_results()


    def advance(self):

        if not self.initialized:
            h.finitialize()
            self.initialized = True

        h.fadvance()


    def save_results(self):

        print("Saving results at t=%s..."%h.t)

        if self.sim_end < 0: self.sim_end = time.time()

        self.display_Voltage_display.exec_menu("View = plot")

        # File to save: time
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...+ '\n')
        f_time_f2.close()
        print("Saved data to: time.dat")

        # File to save: Volts_file
        py_v_V_Volts_file = [ float(x  / 1000.0) for x in h.v_V_Volts_file.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_Volts_file_f2 = open('Vm_iMC1_cell_1_origin.v.dat', 'w')
        num_points = len(py_v_time)  # Simulation may have been stopped before tstop...

        for i in range(num_points):
            f_Volts_file_f2.write('%e\t'% py_v_time[i]  + '%e\t'%(py_v_V_Volts_file[i]) + '\n')
        f_Volts_file_f2.close()
        print("Saved data to: Vm_iMC1_cell_1_origin.v.dat")

        save_end = time.time()
        save_time = save_end - self.sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

if __name__ == '__main__':

    ns = NeuronSimulation(tstop=60000, dt=0.05)

    ns.run()

