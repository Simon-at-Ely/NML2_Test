TITLE Mod file for component: Component(id=Kdr_iAMC_ChannelML type=ionChannelHH)

COMMENT

    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.5.0
         org.neuroml.model   v1.5.0
         jLEMS               v0.9.8.7

ENDCOMMENT

NEURON {
    SUFFIX Kdr_iAMC_ChannelML
    USEION k WRITE ik VALENCE 1 ? Assuming valence = 1; TODO check this!!
    
    RANGE gion                           
    RANGE gmax                              : Will be changed when ion channel mechanism placed on cell!
    RANGE conductance                       : parameter
    
    RANGE g                                 : exposure
    
    RANGE fopen                             : exposure
    RANGE m_instances                       : parameter
    
    RANGE m_tau                             : exposure
    
    RANGE m_inf                             : exposure
    
    RANGE m_rateScale                       : exposure
    
    RANGE m_fcond                           : exposure
    RANGE m_steadyState_TIME_SCALE          : parameter
    RANGE m_steadyState_VOLT_SCALE          : parameter
    
    RANGE m_steadyState_x                   : exposure
    RANGE m_timeCourse_TIME_SCALE           : parameter
    RANGE m_timeCourse_VOLT_SCALE           : parameter
    
    RANGE m_timeCourse_t                    : exposure
    RANGE n_instances                       : parameter
    
    RANGE n_tau                             : exposure
    
    RANGE n_inf                             : exposure
    
    RANGE n_rateScale                       : exposure
    
    RANGE n_fcond                           : exposure
    RANGE n_steadyState_TIME_SCALE          : parameter
    RANGE n_steadyState_VOLT_SCALE          : parameter
    
    RANGE n_steadyState_x                   : exposure
    RANGE n_timeCourse_TIME_SCALE           : parameter
    RANGE n_timeCourse_VOLT_SCALE           : parameter
    
    RANGE n_timeCourse_t                    : exposure
    RANGE m_steadyState_V                   : derived variable
    RANGE m_timeCourse_V                    : derived variable
    RANGE m_tauUnscaled                     : derived variable
    RANGE n_steadyState_V                   : derived variable
    RANGE n_timeCourse_V                    : derived variable
    RANGE n_tauUnscaled                     : derived variable
    RANGE conductanceScale                  : derived variable
    RANGE fopen0                            : derived variable
    
}

UNITS {
    
    (nA) = (nanoamp)
    (uA) = (microamp)
    (mA) = (milliamp)
    (A) = (amp)
    (mV) = (millivolt)
    (mS) = (millisiemens)
    (uS) = (microsiemens)
    (molar) = (1/liter)
    (kHz) = (kilohertz)
    (mM) = (millimolar)
    (um) = (micrometer)
    (umol) = (micromole)
    (S) = (siemens)
    
}

PARAMETER {
    
    gmax = 0  (S/cm2)                       : Will be changed when ion channel mechanism placed on cell!
    
    conductance = 1.0E-5 (uS)
    m_instances = 1 
    m_steadyState_TIME_SCALE = 1 (ms)
    m_steadyState_VOLT_SCALE = 1 (mV)
    m_timeCourse_TIME_SCALE = 1 (ms)
    m_timeCourse_VOLT_SCALE = 1 (mV)
    n_instances = 1 
    n_steadyState_TIME_SCALE = 1 (ms)
    n_steadyState_VOLT_SCALE = 1 (mV)
    n_timeCourse_TIME_SCALE = 1 (ms)
    n_timeCourse_VOLT_SCALE = 1 (mV)
}

ASSIGNED {
    
    gion   (S/cm2)                          : Transient conductance density of the channel? Standard Assigned variables with ionChannel
    v (mV)
    celsius (degC)
    temperature (K)
    ek (mV)
    ik (mA/cm2)
    
    
    m_steadyState_V                        : derived variable
    
    m_steadyState_x                        : conditional derived var...
    
    m_timeCourse_V                         : derived variable
    
    m_timeCourse_t (ms)                    : conditional derived var...
    
    m_rateScale                            : derived variable
    
    m_fcond                                : derived variable
    
    m_inf                                  : derived variable
    
    m_tauUnscaled (ms)                     : derived variable
    
    m_tau (ms)                             : derived variable
    
    n_steadyState_V                        : derived variable
    
    n_steadyState_x                        : conditional derived var...
    
    n_timeCourse_V                         : derived variable
    
    n_timeCourse_t (ms)                    : derived variable
    
    n_rateScale                            : derived variable
    
    n_fcond                                : derived variable
    
    n_inf                                  : derived variable
    
    n_tauUnscaled (ms)                     : derived variable
    
    n_tau (ms)                             : derived variable
    
    conductanceScale                       : derived variable
    
    fopen0                                 : derived variable
    
    fopen                                  : derived variable
    
    g (uS)                                 : derived variable
    rate_m_q (/ms)
    rate_n_q (/ms)
    
}

STATE {
    m_q  
    n_q  
    
}

INITIAL {
    ek = -86.5
    
    temperature = celsius + 273.15
    
    rates()
    rates() ? To ensure correct initialisation.
    
    m_q = m_inf
    
    n_q = n_inf
    
}

BREAKPOINT {
    
    SOLVE states METHOD cnexp
    
    ? DerivedVariable is based on path: conductanceScaling[*]/factor, on: Component(id=Kdr_iAMC_ChannelML type=ionChannelHH), from conductanceScaling; null
    ? Path not present in component, using factor: 1
    
    conductanceScale = 1 
    
    ? DerivedVariable is based on path: gates[*]/fcond, on: Component(id=Kdr_iAMC_ChannelML type=ionChannelHH), from gates; Component(id=m type=gateHHtauInf)
    ? multiply applied to all instances of fcond in: <gates> ([Component(id=m type=gateHHtauInf), Component(id=n type=gateHHtauInf)]))
    fopen0 = m_fcond * n_fcond ? path based
    
    fopen = conductanceScale  *  fopen0 ? evaluable
    g = conductance  *  fopen ? evaluable
    gion = gmax * fopen 
    
    ik = gion * (v - ek)
    
}

DERIVATIVE states {
    rates()
    m_q' = rate_m_q 
    n_q' = rate_n_q 
    
}

PROCEDURE rates() {
    
    m_steadyState_V = v /  m_steadyState_VOLT_SCALE ? evaluable
    if (m_steadyState_V   < ( -66.67 ))  { 
        m_steadyState_x = 0 ? evaluable cdv
    } else  { 
        m_steadyState_x = 0.005* m_steadyState_V  + 0.35 ? evaluable cdv
    }
    
    m_timeCourse_V = v /  m_timeCourse_VOLT_SCALE ? evaluable
    if (m_timeCourse_V   < ( -66.67 ))  { 
        m_timeCourse_t = 230.2566  *  m_timeCourse_TIME_SCALE ? evaluable cdv
    } else  { 
        m_timeCourse_t = ( 29.156*exp(-( m_timeCourse_V +55)/5.8842) + 18.394) *  m_timeCourse_TIME_SCALE ? evaluable cdv
    }
    
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=m type=gateHHtauInf), from q10Settings; null
    ? Path not present in component, using factor: 1
    
    m_rateScale = 1 
    
    m_fcond = m_q ^ m_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=m type=gateHHtauInf), from steadyState; Component(id=null type=Kdr_iAMC_ChannelML_m_inf_inf)
    m_inf = m_steadyState_x ? path based
    
    ? DerivedVariable is based on path: timeCourse/t, on: Component(id=m type=gateHHtauInf), from timeCourse; Component(id=null type=Kdr_iAMC_ChannelML_m_tau_tau)
    m_tauUnscaled = m_timeCourse_t ? path based
    
    m_tau = m_tauUnscaled  /  m_rateScale ? evaluable
    n_steadyState_V = v /  n_steadyState_VOLT_SCALE ? evaluable
    if (n_steadyState_V   < ( 5 ))  { 
        n_steadyState_x = 0 ? evaluable cdv
    } else  { 
        n_steadyState_x = ((-0.006* n_steadyState_V ) + 0.40) ? evaluable cdv
    }
    
    n_timeCourse_V = v /  n_timeCourse_VOLT_SCALE ? evaluable
    n_timeCourse_t = 1.5  *  n_timeCourse_TIME_SCALE ? evaluable
    ? DerivedVariable is based on path: q10Settings[*]/q10, on: Component(id=n type=gateHHtauInf), from q10Settings; null
    ? Path not present in component, using factor: 1
    
    n_rateScale = 1 
    
    n_fcond = n_q ^ n_instances ? evaluable
    ? DerivedVariable is based on path: steadyState/x, on: Component(id=n type=gateHHtauInf), from steadyState; Component(id=null type=Kdr_iAMC_ChannelML_n_inf_inf)
    n_inf = n_steadyState_x ? path based
    
    ? DerivedVariable is based on path: timeCourse/t, on: Component(id=n type=gateHHtauInf), from timeCourse; Component(id=null type=Kdr_iAMC_ChannelML_n_tau_tau)
    n_tauUnscaled = n_timeCourse_t ? path based
    
    n_tau = n_tauUnscaled  /  n_rateScale ? evaluable
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    
     
    rate_m_q = ( m_inf  -  m_q ) /  m_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    rate_n_q = ( n_inf  -  n_q ) /  n_tau ? Note units of all quantities used here need to be consistent!
    
     
    
     
    
     
    
}

